<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
		<title>Calculator</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reset.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/theme/simple.css" id="theme">
		<link rel="stylesheet" href="../css/mono-blue.css">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata|Roboto:300,400,500|Work+Sans:400,700">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/katex.min.css" integrity="sha384-6LkG2wmY8FK9E0vU9OOr8UvLwsaqUg9SETfpq4uTCN1agNe8HRdE9ABlk+fVx6gZ" crossorigin="anonymous">
		<style>
			.reveal {
				font-family: "Work Sans", sans-serif;
			}

			.reveal .slides section {
				text-align: left;
				font-size: smaller;
			}

			.reveal pre {
				background-color: #f5f5f5;
				width: 100%;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-shadow: none;
			}

			.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
				font-family: "Roboto", sans-serif;
				color: #0072c1;
			}

			.reveal section.heading-only {
				text-align:center;
				padding-top:20%;
			}

            .no-code-badge .code-badge {
                display: none;
            }

            .code-badge-language {
                display: none;
            }

			.python-tutor-link {
				font-size: smaller;
			}

			.python-tutor-link:before {
				content: "";
				display: block;
				background: url("http://pythontutor.com/favicon.ico") no-repeat;
				width: 48px;
				height: 48px;
				float: left;
				margin: 0 6px 0 0;
			}

			.reveal h3 {
				margin-bottom: 40px;
			}

            .smaller {
                font-size: smaller;
            }

            code {
                padding: 2px 4px;
                font-size: 90%;
                color: #0072c1;
                background-color: #f9f2f4;
                border-radius: 4px;
            }

            p.padded {
                margin-top: 32px;
            }

            section .row {
                display: flex;
            }

            section .column {
                flex: 48%;
                margin: 10px;
            }

			@media print
			{
				.no-print, .no-print *
				{
					display: none !important;
				}
			}


            .regex-input {
                border:1px solid rgb(204, 204, 204);
                background: rgb(245, 245, 245);
                padding: 8px;
            }

            .regex-input input {
                font-size: inherit;
            }

            .regex-input input[type=text]:invalid {
                background-color: pink;
            }

		</style>
        <style>
            .env-diagram {
                position: relative;
                font-family: monospace;
                font-size: 18px;
            }
            .env-diagram-frame table.table {
                margin: 0px;
            }
            .env-diagram .env-diagram-frame, .env-diagram .env-diagram-objects {
                width: 310px;
                border-left: 1px solid #aaa;
                margin-bottom: 15px;
                padding: 8px;
            }
            .env-diagram .env-diagram-frame.current {
                background: #e2ebf6;
            }
            .env-diagram .env-diagram-frame td, .env-diagram .env-diagram-objects td {
                font-size: smaller;
            }
            .env-diagram .env-diagram-connector {
                color: #005583;
            }
            .env-diagram .env-diagram-objects {
                float: right;
            }
            .env-diagram .env-diagram-objects ul {
                list-style: none;
                padding: 0;
                margin: 0;
            }
            .env-diagram .env-diagram-objects td {
                width: 230px;
            }
            .env-diagram .env-diagram-objects .env-diagram-connector {
                margin-right: 8px;
            }
            .env-diagram .env-diagram-objects .env-diagram-trash {
                padding-top: 6px;
                margin-top: 12px;
            }
            .env-diagram .env-diagram-frame > div {
                margin-bottom: 10px;
            }
            .env-diagram .env-diagram-frame > div input {
                width: 90px;
            }
            .env-diagram .env-diagram-frame > div input:first-of-type {
                margin-right: 8px;
            }
            .env-diagram .env-diagram-frame table {
                margin-bottom: 0px;
            }
            .env-diagram .env-diagram-frame table input {
                width: 100px;
            }
            .env-diagram .env-diagram-frame table tbody td {
                padding: 2px;
                padding-right: 6px;
                height: 24px;
            }
            .env-diagram .env-diagram-frame table tbody td:first-child {
                text-align: right;
                width: 105px;
            }
            .env-diagram .env-diagram-frame table tbody td:nth-child(2) {
                width: 60px;
                border-left: 1px solid black;
                border-bottom: 1px solid black;
            }
            .env-diagram .env-diagram-frame .env-diagram-connector {
                margin-left: 12px;
            }
            .numbered-code ol {
                line-height: 1.7em;
                font-size: 1.0em;
                margin: 20px auto;
                width: 100%;
            }
            .numbered-code li {
                position: relative;
            }
            .numbered-code .line-arrow {
                position: absolute;
                right: 8px;
                bottom: 0px;
                font-size: 0.7em;
            }
            .numbered-code .line-current {
                color: blue;
            } 
            .numbered-code .line-previous {
                color: rgb(171, 171, 202);
            } 
        </style>
        <style>
        .circle-marker {
            position: absolute;
            background: blue;
            color: white;
            font-size: 20px;
            border-radius: 30px;
            width: 30px;
            height: 30px;
            text-align: center;
        }
        .circle-marker-arc {
            position: absolute;
            width: 60px;
            height: 90px;
            background: transparent;
            border-radius: 100px;
            border-left: 1px solid blue;
        }
        </style>
        <style>
        .bordered {
            border: 1px dashed blue;
            border-radius: 8px;
            padding: 6px;
            --balloon-font-size: 20px;
        }
        </style>
	</head>
	<body>
		<div class="reveal">
			<div class="slides">


				<section class="heading-only" style="padding-top:5%">
                    <h1>Calculator</h1>

					<div class="no-print" style="text-align: left; margin-top: 100px; font-size: 70%;">
						Tips for navigating the slides:
						<ul>
							<li>Press O or Escape for overview mode.</li>
							<li>Visit <a href="27-Interpreters_Calculator.html?print-pdf" target="_blank">this link</a> for a nice printable version</li>
							<li>Press the copy icon on the upper right of code blocks to copy the code</li>
						</ul>
                    </div>

                    <aside class="speaker-notes">
                    </aside>
				</section>


                <section>
                    <h3>Class outline:</h3>

                    <ul>
                        <li>Programming languages
                        <li>Parsing a language
                        <li>The Calculator language
                        <li>Evaluating a language
                        <li>Interactive interpreters
                    </ul>
                </section>


                <section class="heading-only">
                    <h2>Programming languages</h2>
                </section>

                <section>
                    <h3>Levels of languages</h3>

                    <div style="text-align:center">
                    <p><strong>High-level programming language</strong><br>
                        (Python, C++, JavaScript)
                    </p>
                    <p>⬇</p>
                    <p><strong>Assembly language</strong><br>
                      (Hardware-specific)
                    </p>
                    <p>⬇</p>
                    <p><strong>Machine language</strong><br>
                        (Hardware-specific)
                    </p>
                    </div>
                </section>

                <section>
                    <h3>Machine language</h3>

                    <p>The language of the machine is all 1s and 0s, often
                        specifying the action and the memory address to act on:</p>
                    <pre style="font-size:1.0em" class="no-code-badge"><code data-trim data-noescape class="python">
                    00000100 10000010  # Load data in 10000010
                    00000001 10000001  # Subtract data at 10000001
                    00000101 10000100  # Store result in 10000100
                    00001011 10000100  # Etc..
                    00001101 00010000
                    00010100 00000010
                    00000101 10000011
                    00001111 00000000
                    00010100 00000011
                    00000101 10000011
                    00001111 00000000
                    </code></pre>

                    <p>Code is executed directly by the hardware.</p>
                </section>

                <section>
                    <h3>Assembly language</h3>

                    <p>Assembly language was introduced for (slightly) easier programming.</p>

                    <table>
                        <thead>
                            <tr>
                                <th>Machine code
                                <th>Assembly code
                        <tbody>
                            <tr>
                                <td>
                                    <pre style="font-size:1.0em" class="no-code-badge"><code data-trim data-noescape class="text">
                                    00000100 10000010
                                    00000001 10000001
                                    00000101 10000100
                                    00001011 10000100
                                    00001101 00010000
                                    00010100 00000010
                                    00000101 10000011
                                    00001111 00000000
                                    00010100 00000011
                                    00000101 10000011
                                    00001111 00000000
                                    </code></pre>
                                <td>
                                    <pre style="font-size:1.0em" class="no-code-badge"><code data-trim data-noescape class="text">
                                    LOD Y
                                    SUB X
                                    STO T1
                                    CPL T1
                                    JMZ 16
                                    LOD #2
                                    STO Z
                                    HLT
                                    LOD #3
                                    STO Z
                                    HLT
                                    </code></pre>
                        </table>

                        <p>Assembly still has a 1:1 mapping with machine language, however.</p>
                </section>

                <section>
                    <h3>Higher-level languages</h3>


                    <p>Higher level languages:</p>
                    <ul>
                        <li>provide means of abstraction such as naming, function definition, and objects
                        <li>abstract away system details to be independent of hardware and operating system
                    </ul>

                    <pre style="font-size:1.0em"><code data-trim data-noescape class="python">
                    if x > y:
                        z = 2
                    else:
                        z = 3
                    </code></pre>

                    <p>Statements & expressions are either <strong>interpreted</strong> by another program or
                        <strong>compiled</strong> (translated) into a lower-level language.</p>

                </section>

                <section>
                    <h3>Compilers & Interpreters</h3>

                    <p>A <strong>compiler</strong> translates source code into machine code,
                        so that the machine code can be distributed and run repeatedly.
                    </p>
                    <img src="images/compiler.png" alt="Source code → Compiler → Machine Code → Output">

                    <p>An <strong>interpreter</strong> runs source code directly,
                        without first compiling it into machine code.</p>
                    
                    <img src="images/interpreter.png" alt="Source code → Interpreter → Output" width="620">

                    <div style="display:none;">
                    <p class="padded">In its most popular implementation (CPython), Python programs are interpreted but have a compile step:</p>
                    <p style="font-size:0.8em;"><code>Source code → Compiler → Bytecode → Virtual Machine → Output</code></p>
                    </div>

                </section>

                <section>
                    <h3>Understanding source code</h3>

                    <p>In order to either interpret or compile source code,
                        a <strong>parser</strong> must be written to understand that source code.
                    </p>

                    <p class="smaller">Compilers have parsers:</p>
                    <img src="images/compiler_steps.png" alt="Parser → AST → Code Generator" width="800">

                    <p class="smaller">So do interpreters!</p>
                    <img src="images/interpreter_steps.png" alt="Parser → AST → Evaluator" width="620">

                </section>


                <section class="heading-only">
                    <h2>Parsing Scheme</h2>


                    <p>Parsing: turning a string representation of an expression
                        into a structured object representing the expression.</p>
                </section>

                <section>
                    <h3>Reminder: Scheme Lists</h3>

                    <p>A Scheme list is written as elements in parentheses:</p>

                    <pre style="font-size:1.0em" class="no-code-badge"><code data-trim data-noescape class="scheme">
                    (&lt;element_0&gt; &lt;element_1&gt; ... &lt;element_n&gt;)
                    </code></pre>

                    <p>Each &lt;element&gt; can be a combination or primitive.</p>

                    <pre style="font-size:1.0em"><code data-trim data-noescape class="scheme">
                    (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) 
                    </code></pre>

                </section>

                <section>
                    <h3>Parsing</h3>

                    <p>A parser takes text and returns an expression object.</p>

                    <table>
                        <thead>
                            <tr>
                                <th style="width:200px;">Text
                                <th>Lexical<br>Analysis
                                <th  style="width:200px;">Tokens
                                <th>Syntactic<br>Analysis
                                <th>Expression
                        <tbody>
                            <tr>
                                <td class="smaller"><code>'(+ 1'</code>
                                <td>→
                                <td style="font-size:0.8em;"><code>'('</code>, <code>'+'</code>, <code>1</code>
                                <td rowspan="3"  style="border-bottom:none;">→</td>
                                <td rowspan="3" style="font-size:0.6em; border-bottom:none;"><code>Pair('+', Pair(1, ...))</code>
                                    <br><br>printed as<br><br>
                                    (+ 1 (- 23) (* 4 5.6))
                            <tr>
                                <td class="smaller"><code>' (- 23)'</code>
                                <td>→
                                <td style="font-size:0.8em;"><code>'('</code>, <code>'-'</code>, <code>23</code>, <code>')'</code>
                            <tr>
                                <td class="smaller"><code>' (* 4 5.6))'</code>
                                <td>→
                                <td style="font-size:0.8em;"><code>'('</code>, <code>'*'</code>, <code>4</code>, <code>5.6</code>, <code>')'</code>, <code>')'</code>
                    </table>  
                </section>

                <section>
                    <h3>Lexical analysis</h3>

                    <code>' (* 4 5.6))'</code> → <code>'('</code>, <code>'*'</code>, <code>4</code>, <code>5.6</code>, <code>')'</code>, <code>')'</code>
                    <br><br>
                    <ul class="padded">
                        <li>Iterative process
                        <li>Checks for malformed tokens
                        <li>Determines types of tokens
                        <li>Processes one line at a time
                    </ul>
                </section>

                <section>
                    <h3>Syntactic analysis</h3>

                    <code>'('</code>, <code>'+'</code>, <code>1</code>, ...</code> → <code>Pair('+', Pair(1, ...))</code>
                    <br><br>
                    <ul class="padded">
                        <li>Tree-recursive process
                        <li>Balances parentheses
                        <li>Returns tree structure
                        <li>Processes multiple lines
                    </ul>

                    <p>In scheme_reader.py, each call to <code>scheme_read</code> consumes the input tokens for exactly one expression.</p>
                    <ul>
                        <li>Base case: <span class="fragment">symbols and numbers</span>
                        <li>Recursive case: <span class="fragment">read subexpressions and combine them</span>
                    </ul> 
                </section>

                <section>
                    <h3>Pair class</h3>

                    <p>The Pair class represents Scheme lists.</p>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    class Pair:
                        def __init__(self, first, second):
                            self.first = first
                            self.second = second
                    </code></pre>

                    <p>Well-formed list: (second element is either a pair or <code>nil</code>)</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    s = Pair(1, Pair(2, Pair(3, nil)))
                    print(s)  <span class="fragment"># (1 2 3)</span>
                    len(s)    <span class="fragment"># 3</span>
                    </code></pre>

                    <p class="padded">Improper lists:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    print(Pair(1, 2))          <span class="fragment"># (1 . 2)</span>
                    print(Pair(1, Pair(2, 3))) <span class="fragment"># (1 2 . 3)</span>
                    len(Pair(1, Pair(2, 3)))   <span class="fragment"># Error!</span>
                    </code></pre>

                </section>
            

                <section class="heading-only">
                    <h2>The Calculator Language</h2>
                </section>

                <section>
                    <h3>What's in a language?</h3>

                    <p>A programming language has:</p>
                    <ul>
                        <li><strong>Syntax</strong>: The legal statements and expressions in the language
                        <li><strong>Semantics</strong>: The execution/evaluation rule for those statements and expressions
                    </ul>

                    <p>To create a new programming language, you need either one of these:</p>
                    <ul>
                        <li><strong>Specification</strong>: A document describing the precise syntax and semantics of the language
                        <li><strong>Canonical Implementation</strong>: An interpreter or compiler for the language
                    </ul>
                </section>

                <section>
                    <h3>Calculator language syntax</h3>

                    <p>The Calculator language has primitive expressions and call expressions. (That's it!) </p>

                    <p class="smaller">A <strong>primitive expression</strong> is a number: <code>2</code> <code>-4</code> <code>5.6</code> </p>

                    <p class="smaller">A <strong>call expression</strong> is a combination that begins with an operator (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) followed by 0
                        or more expressions: <br>
                        <code>(+ 1 2 3)</code> <code>(/ 3 (+ 4 5))</code></p>

                    <table>
                        <thead>
                            <tr>
                                <th>Expression
                                <th style="width:270px;">Expression tree
                                <th>Representation as pairs
                        <tbody>
                            <tr>
                                <td style="vertical-align:top;">
                                    <pre style="font-size:0.7em" class="no-code-badge"><code data-trim data-noescape class="scheme">
                                    (* 3
                                        (+ 4 5)
                                        (* 6 7 8))
                                    </code></pre>
                                <td>
                                    <img src="images/calculator_exp_tree.png" alt="Diagram of expression tree for calculator expression"/>
                                <td>
                                    <img src="images/calculator_pairs.png" alt="Diagram of Pairs for Calculator expression"/>
                    </table>
                </section>

                <section>
                    <h3>Calculator language semantics</h3>

                    <p>The value of a calculator expression is defined recursively.</p>

                    <ul class="smaller">
                        <li><strong>Primitive</strong>: A number evaluates to itself. 
                        <li><strong>Call</strong>:  A call expression evaluates to its argument values combined by an operator.
                        <ul>
                            <li><code>+</code>: Sum of the arguments 
                            <li><code>*</code>: Product of the arguments
                            <li><code>-</code>: If one argument, negate it. If more than one, subtract the rest from the first.
                            <li><code>/</code>: If one argument, invert it. If more than one, divide the rest from the first.
                        </ul>
                    </ul>

                    <table>
                        <thead>
                            <tr>
                                <th>Expression
                                <th>Expression Tree
                        <tbody>
                            <tr>
                                <td style="vertical-align:top;">
                                    <pre style="font-size:1.0em" class="no-code-badge"><code data-trim data-noescape class="scheme">
                                    (+ 5
                                        (* 2 3)
                                        (* 2 5 5))
                                    </code></pre>
                                <td>
                                    <img src="images/calculator_exp_tree_evald.png" alt="Diagram of evaluated expression tree for Calculator expression" height="150"/>
                    </table>
                </section>

                <section class="heading-only">
                    <h2>Evaluating Calculator</h2>
                    <p>Evaluation: Turning a structured representation of a program
                        into the expected program output according to the language semantics.</p>
                </section>

                <section>
                    <h3>The eval function</h3>
                    
                    <p>The eval function computes the value of an expression.</p>

                    <p>It is a generic function that behaves according to the type of the expression (primitive or call).</p>

                    <table>
                        <thead>
                            <tr>
                                <th>Implementation
                                <th>Language semantics
                        <tbody>
                            <tr>
                                <td style="vertical-align:top">
                                    <pre style="font-size:0.6em"><code data-trim data-noescape class="python">
                                    def calc_eval(exp):
                                        if isinstance(exp, (int, float)):
                                            return exp
                                        elif isinstance(exp, Pair):
                                            arguments = exp.second.map(calc_eval)
                                            return calc_apply(exp.first, arguments)
                                        else:
                                            raise TypeError
                                    </code></pre>
                                <td style="vertical-align:top; font-size:0.6em;">
                                    <p>A <strong>number</strong> evaluates...<br>
                                        to itself</p>
                                    <p>A <strong>call expression</strong> evaluates...<br>
                                        to its argument values combined by an operator
                                    </p>
                        </table>
                    </section>

                    <section>
                        <h3>Applying built-in operators</h3>

                        <p>The apply function applies some operation to a (Scheme) list of argument values</p>

                        <p>In calculator, all operations are named by built-in operators: +, -, *, /</p>

                        <table>
                            <thead>
                                <tr>
                                    <th>Implementation
                                    <th>Language semantics
                            <tbody>
                                <tr>
                                    <td>
                                        <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                        def calc_apply(operator, args):
                                            if operator == '+':
                                                return reduce(add, args, 0)
                                            elif operator == '-':
                                                ...
                                            elif operator == '*':
                                                ...
                                            elif operator == '/':
                                                ...
                                            else:
                                                raise TypeError
                                        </code></pre>
                                    <td style="font-size:0.6em; vertical-align:top;">
                                        <p><code>+</code><br>
                                            Sum of the arguments
                                        </p>
                                        <p><code>-</code><br>
                                            ...
                                        </p>
                                        <p><code>*</code><br>
                                            ...
                                        </p>
                                        <p><code>/</code><br>
                                            ...
                                        </p>
                        </table>
                    </section>

                    <section class="heading-only">
                        <h2>Interactive interpreters</h2>
                    </section>

                    <section>
                        <h3>REPL: Read-Eval-Print Loop</h3>

                        <p>The user interface for many programming languages is an interactive interpreter </p>
                        <ol>
                            <li>Print a prompt
                            <li>Read text input from the user
                            <li>Parse the text input into an expression
                            <li>Evaluate the expression
                            <li>If any errors occur, report those errors, otherwise
                            <li>Print the value of the expression and repeat
                        </ol>
                    </section>

                    <section>
                        <h3>Raising exceptions</h3>

                        <p>Exceptions can be raised during lexical analysis, syntactic analysis, eval, and apply.</p>

                        <p>Example exceptions</p>
                        <ul>
                            <li><strong>Lexical analysis</strong>: The token <code>2.3.4</code> raises <code>ValueError("invalid numeral")</code>
                            <li><strong>Syntactic analysis</strong>: An extra <code>)</code> raises <code>SyntaxError("unexpected token")</code>
                            <li><strong>Eval</strong>: An empty combination raises <code>TypeError("() is not a number or call expression")</code>
                            <li><strong>Apply</strong>: No arguments to <code>-</code> raises <code>TypeError("- requires at least 1 argument")</code>
                        </ul>
                    </section>

                    <section>
                        <h3>Handling exceptions</h3>

                        <p>An interactive interpreter prints information about each error.</p>
                        
                        <p>A well-designed interactive interpreter should not halt completely on an error,
so that the user has an opportunity to try again in the current environment.</p>
                    </section>

			</div>
		</div>

        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/plugin/highlight/highlight.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/highlightjs-badge@0.1.9/highlightjs-badge.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/reveal.js-menu@2.1.0/menu.js"></script>
        <!-- The loading of KaTeX is deferred to speed up page rendering -->
        <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/katex.min.js" integrity="sha384-31El76TwmbHj4rF9DyLsygbq6xoIobG0W+jqXim+a3dU9W53tdH3A/ngRPxOzzaB" crossorigin="anonymous"></script>
        <!-- To automatically render math in text elements, include the auto-render extension: -->
        <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/contrib/auto-render.min.js" integrity="sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl" crossorigin="anonymous"
            onload="renderMathInElement(document.body, {fleqn: true});"></script>
        <script>
            const srcUrlPrefix = "https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/";
            Reveal.initialize({
                hash: true,
                center: false,
                slideNumber: true,
                showNotes: false,
                margin: 0.1,
                preloadIframes: true,
                plugins: [ RevealHighlight, RevealMenu ],
                pdfSeparateFragments: true
            });

            // add HighlightJS-badge (options are optional)
            var options = {
                copyIconContent: "📄",
                checkIconContent: "✅"
            };
            window.highlightJsBadge();

            if (window.location.search == "?print-pdf") {
                var uncounted = document.querySelectorAll("[data-visibility='uncounted']");
                uncounted.forEach(node => {
                    node.parentNode.classList.add("no-print")
                })
            }
        </script>
    </body>
</html>