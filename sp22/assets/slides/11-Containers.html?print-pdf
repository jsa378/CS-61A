<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
		<title>Containers</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reset.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/theme/simple.css" id="theme">
		<link rel="stylesheet" href="../css/mono-blue.css">
        <link rel="stylesheet" href="https://unpkg.com/balloon-css/balloon.min.css">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata|Roboto:300,400,500|Work+Sans:400,700">
		<style>
			.reveal {
				font-family: "Work Sans", sans-serif;
			}

			.reveal .slides section {
				text-align: left;
				font-size: smaller;
			}

			.reveal pre {
				background-color: #f5f5f5;
				width: 100%;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-shadow: none;
			}

			.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
				font-family: "Roboto", sans-serif;
				color: #0072c1;
			}

			.reveal section.heading-only {
				text-align:center;
				padding-top:20%;
			}

            .no-code-badge .code-badge {
                display: none;
            }

            .code-badge-language {
                display: none;
            }

			.python-tutor-link {
				font-size: smaller;
			}

			.python-tutor-link:before {
				content: "";
				display: block;
				background: url("http://pythontutor.com/favicon.ico") no-repeat;
				width: 48px;
				height: 48px;
				float: left;
				margin: 0 6px 0 0;
			}

			.reveal h3 {
				margin-bottom: 40px;
			}

            .smaller {
                font-size: smaller;
            }

            code {
                padding: 2px 4px;
                font-size: 90%;
                color: #0072c1;
                background-color: #f9f2f4;
                border-radius: 4px;
            }

            p.padded {
                margin-top: 32px;
            }

            section .row {
                display: flex;
            }

            section .column {
                flex: 48%;
                margin: 10px;
            }

			@media print
			{
				.no-print, .no-print *
				{
					display: none !important;
				}
			}
		</style>
        <style>
        .circle-marker {
            position: absolute;
            background: blue;
            color: white;
            font-size: 20px;
            border-radius: 30px;
            width: 30px;
            height: 30px;
            text-align: center;
        }
        .circle-marker-arc {
            position: absolute;
            width: 60px;
            height: 90px;
            background: transparent;
            border-radius: 100px;
            border-left: 1px solid blue;
        }
        </style>
        <style>
        .bordered {
            border: 1px dashed blue;
            border-radius: 8px;
            padding: 6px;
            --balloon-font-size: 20px;
        }
        </style>
	</head>
	<body>
		<div class="reveal">
			<div class="slides">

                <section class="heading-only" style="padding-top:5%">
                    <h1>Containers</h1>

                    <div class="no-print" style="text-align: left; margin-top: 100px; font-size: 70%;">
                        Tips for navigating the slides:
                        <ul>
                            <li>Press O or Escape for overview mode.</li>
                            <li>Visit <a href="11-Containers.html?print-pdf" target="_blank">this link</a> for a nice printable version</li>
                            <li>Press the copy icon on the upper right of code blocks to copy the code</li>
                        </ul>
                    </div>

                    <aside class="speaker-notes">
                    </aside>
                </section>

                <section>
                    <h3>Class outline:</h3>

                    <ul>
                        <li>Lists
                        <li>Containment
                        <li>For statements
                        <li>Ranges
                        <li>List comprehensions
                        <li>String literals
                    </ul>
                </section>

                <section class="heading-only">
                    <h2>Lists</h2>
                </section>


                <section>
                    <h3>Lists</h3>

                    <p>A list is a container that holds a sequence of related pieces of information.</p>
                    
                    <p class="padded">The shortest list is an empty list, just 2 square brackets:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    members = []
                    </code></pre>
                    <p>Lists can hold any Python values, separated by commas:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    members = ["Pamela", "Tinu", "Brenda", "Kaya"]

                    ages_of_kids = [1, 2, 7]

                    prices = [79.99, 49.99, 89.99]

                    digits = [2//2, 2+2+2+2, 2, 2*2*2]

                    remixed = ["Pamela", 7, 79.99, 2*2*2]
                    </code></pre>

                </section>

                <section>
                    <h3>List length</h3>

                    <p>Use the global <code>len()</code> function
                        to find the length of a list.</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    attendees = ["Tammy", "Shonda", "Tina"]

                    print(len(attendees))   <span class="fragment">#  3</span>

                    num_of_attendees = len(attendees)
                    print(num_of_attendees)
                    </code></pre>

                    <p>🤔 What could go wrong with storing the length?</p>

                </section>

                <section>
                    <h3>Accessing list items (brackets)</h3>

                    <p>Each list item has an index, starting from 0.</p>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    letters = ['A', 'B', 'C']
                    # Index:   0     1     2
                    </code></pre>

                    <p>Access each item by putting the index in brackets:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    letters[0]  <span class="fragment" data-fragment-index="1"># 'A'</span>
                    letters[1]  <span class="fragment" data-fragment-index="1"># 'B'</span>
                    letters[2]  <span class="fragment" data-fragment-index="1"># 'C'</span>
                    letters[3]  <span class="fragment" data-fragment-index="2"># 🚫 Error!</span>
                    </code></pre>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    curr_ind = 1
                    letters[curr_ind] <span class="fragment" data-fragment-index="1"># 'B'</span>
                    </code></pre>

                    <div class="fragment">
                    <p>Negative indices are also possible:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    letters[-1]  <span class="fragment" data-fragment-index="4"># 'C'</span>
                    letters[-2]  <span class="fragment" data-fragment-index="4"># 'B'</span>
                    letters[-4]  <span class="fragment" data-fragment-index="4"># 🚫 Error!</span>
                    </code></pre>
                    </div>
                </section>

                <section>
                    <h3>Accessing list items (function)</h3>
                    
                    <p>It's also possible to use a function from the operator module:</p>
                    <pre style="font-size:1.0em"><code data-trim data-noescape class="python">
                    from operator import getitem

                    getitem(letters, 0)
                    </code></pre>
                </section>

                <section>
                    <h3>List concatenation</h3>

                    <p>Add two lists together using the <code>+</code> operator:</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    boba_prices = [5.50, 6.50, 7.50]
                    smoothie_prices = [7.00, 7.50]
                    all_prices = boba_prices + smoothie_prices
                    </code></pre>

                    <p class="padded">Or the <code>add</code> function:</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    from operator import add

                    boba_prices = [5.50, 6.50, 7.50]
                    smoothie_prices = [7.00, 7.50]
                    all_prices = add(boba_prices, smoothie_prices)
                    </code></pre>

                </section>

                <section>
                    <h3>List repetition</h3>

                    <p>Concatenate the same list multiple times using the <code>*</code> operator:</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    boba_prices = [5.50, 6.50, 7.50]

                    more_boba = boba_prices * 3
                    </code></pre>

                    <p>Or the <code>mul</code> function:</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    from operator import mul

                    boba_prices = [5.50, 6.50, 7.50]
                    more_boba = mul(boba_prices, 3)
                    </code></pre>

                    <p>All together now:</p>

                    <pre style="font-size:0.8em"><code data-trim data-noescape class="python">
                    digits = [1, 9, 8, 4]
                    together = [6, 2, 4] + digits * 2 <span class="fragment"># [6, 2, 4, 1, 9, 8, 4, 1, 9, 8, 4]</span>
                    together = add([2, 7], mul(digits, 2)) 
                    </code></pre>
                </section>

                <section>
                    <h3>Nested Lists</h3>

                    <p>Since Python lists can contain any values, an item can itself be a list.</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    gymnasts = [ ["Brittany", 9.15, 9.4, 9.3, 9.2],
                                    ["Lea", 9, 8.8, 9.1, 9.5],
                                    ["Maya", 9.2, 8.7, 9.2, 8.8] ]
                    </code></pre>

                    <ul>
                        <li>What's the length of <code>gymnasts</code>? <span class="fragment">3</span>
                        <li>What's the length of <code>gymnasts[0]</code>? <span class="fragment">5</span>
                    </ul>

                    <aside class="notes">
                        Can also think of it in terms of rows and columns.
                    </aside>
                </section>

                
                <section>
                    <h3>Accessing nested list items</h3>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    gymnasts = [
                                    ["Brittany", 9.15, 9.4, 9.3, 9.2],
                                    ["Lea", 9, 8.8, 9.1, 9.5],
                                    ["Maya", 9.2, 8.7, 9.2, 8.8]
                                ]
                    </code></pre>

                    <p>Access using bracket notation, with more brackets as needed:</p>
                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    gymnasts[0]    <span class="fragment"># ["Brittany", 9.15, 9.4, 9.3, 9.2]</span>
                    gymnasts[0][0] <span class="fragment"># "Brittany"</span>
                    gymnasts[1][0] <span class="fragment"># "Lea"</span>
                    gymnasts[1][4] <span class="fragment"># 9.5</span>
                    gymnasts[1][5] <span class="fragment"># 🚫 IndexError!</span>
                    gymnasts[3][0] <span class="fragment"># 🚫 IndexError!</span>
                    </code></pre>
                </section>



                <section class="heading-only">
                    <h2>Containment</h2>
                </section>

                <section>
                    <h3>Containment operator</h3>

                    <p>Use the <code>in</code> operator to test if value is inside a container:</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    digits = [2, 8, 3, 1, 8, 5, 3, 0, 7, 1]

                    1 in digits <span class="fragment" data-fragment-index="1"># True</span>

                    3 in digits <span class="fragment" data-fragment-index="1"># True</span>

                    4 in digits <span class="fragment" data-fragment-index="1"># False</span>

                    not (4 in digits) <span class="fragment" data-fragment-index="1"># True</span>
                    </code></pre>
                </section>

                <section class="heading-only">
                    <h2>For statements</h2>
                </section>

                <section>
                    <h3>For loop</h3>

                    <p>The for loop syntax:</p>

                    <pre style="font-size:0.8em"><code data-trim data-noescape class="python">
                    for &lt;value&gt; in &lt;sequence&gt;:
                        &lt;statement&gt;
                        &lt;statement&gt;
                    </code></pre>

                    <p>The for loop provides a cleaner way to write many <code>while</code> loops,
                        as long as they are iterating over some sort of sequence.
                    </p>

                    <pre style="font-size:0.8em"><code data-trim data-noescape class="python">
                    def count(s, value):
                        total = 0
                        for element in s:
                            if element == value:
                                total = total + 1
                        return total
                    </code></pre>
                </section>

                <section>
                    <h3>For statement execution procedure</h3>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    for &lt;name&gt; in &lt;expression&gt;:
                        &lt;suite&gt;
                    </code></pre>

                    <ol>
                        <li>Evaluate the header <code>&lt;expression&gt;</code>, which must yield an iterable value (a sequence)
                        <li>For each element in that sequence, in order:
                            <ol>
                            <li>Bind <code>&lt;name&gt;</code> to that element in the current frame
                            <li>Execute the <code>&lt;suite&gt;</code>
                            </ol>
                    </ol>
                </section>

                <section>
                    <h3>Looping through nested lists</h3>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    gymnasts = [
                                    ["Brittany", 9.15, 9.4, 9.3, 9.2],
                                    ["Lea", 9, 8.8, 9.1, 9.5],
                                    ["Maya", 9.2, 8.7, 9.2, 8.8]
                                ]
                    </code></pre>

                    <p>Use a nested <code>for-in</code> loop:</p>
                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    for gymnast in gymnasts:
                        for data in gymnast:
                            print(data, end="|")
                    </code></pre>

                    <p>Remember what type of data is being stored in the loop variable!</p>
                </section>

                <section>
                    <h3>Sequence unpacking in for statements</h3>

                    <pre style="font-size:0.9em"><code data-trim data-noescape class="python">
                    pairs = [[1, 2], [2, 2], [3, 2], [4, 4]]
                    same_count = 0

                    for x, y in pairs:
                        if x == y:
                            same_count = same_count + 1
                    </code></pre>

                    <p>Each name is bound to a value, like in multiple assignment.</p>
                </section>

                <section class="heading-only">
                    <h2>Ranges</h2>
                </section>

                <section>
                    <h3>The range type</h3>

                    <p>A range represents a sequence of integers.</p>

                    <pre style="font-size:0.9em"><code data-trim data-noescape>
                    ... -5, -4, -3, <span style="background:yellow">-2, -1, 0, 1, 2</span>, 3, 4, 5...
                                    range(-2, 3)
                    </code></pre>

                    <p class="smaller">If just one argument, range starts at 0 and ends just before it:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    for num in range(6):
                        print(num)       # 0, 1, 2, 3, 4, 5
                    </code></pre>
                    <p class="smaller">If two arguments, range starts at first and ends just before second:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    for num in range(1, 6):
                        print(num)       # 1, 2, 3, 4, 5
                    </code></pre>
                </section>

                <section class="heading-only">
                    <h2>List comprehensions</h2>
                </section>

                <section>
                    <h3>List comprehension syntax</h3>

                    <p>A way to create a new list by "mapping" an existing list.</p>
                    
                    <p>Short version:</p>
                    <pre style="font-size:0.8em; margin-bottom:24px;" class="no-code-badge"><code data-trim data-noescape class="python">
                    [&lt;map exp&gt; for &lt;name&gt; in &lt;iter exp&gt;]
                    </code></pre>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    odds = [1, 3, 5, 7, 9]
                    evens = [(num + 1) for num in odds]
                    </code></pre>

                    <div class="fragment">
                    <p>Long version (with filter):</p>
                    <pre style="font-size:0.8em; margin-bottom:24px;" class="no-code-badge"><code data-trim data-noescape class="python">
                    [&lt;map exp&gt; for &lt;name&gt; in &lt;iter exp&gt; if &lt;filter exp&gt;]
                    </code></pre>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    temps = [60, 65, 71, 67, 77, 89]
                    hot = [temp for temp in temps if temp > 70]
                    </code></pre>
                    </div>
                </section>

                <section>
                    <h3>List comprehension execution procedure</h3>

                    <pre style="font-size:0.9em;" class="no-code-badge"><code data-trim data-noescape class="python">
                    [&lt;map exp&gt; for &lt;name&gt; in &lt;iter exp&gt; if &lt;filter exp&gt;]
                    </code></pre>
                    
                    <ul class="smaller">
                        <li>Add a new frame with the current frame as its parent
                        <li>Create an empty result list that is the value of the expression
                        <li>For each element in the iterable value of <code>&lt;iter exp&gt;</code>:
                            <ul>
                            <li>Bind <code>&lt;name&gt;</code> to that element in the new frame from step 1
                            <li>If <code>&lt;filter exp&gt;</code> evaluates to a true value, then add the value of <code>&lt;map exp&gt;</code> to the result list
                            </ul>
                    </ul>

                    <pre style="font-size:0.8em; margin-top:48px;"><code data-trim data-noescape class="python">
                    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'm', 'n', 'o', 'p']
                    word = [letters[i] for i in [3, 4, 6, 8]]
                    </code></pre>
                    <p class="python-tutor-link">
                        <a target="_blank" href="https://pythontutor.com/composingprograms.html#code=letters%20%3D%20%5B'a',%20'b',%20'c',%20'd',%20'e',%20'f',%20'm',%20'n',%20'o',%20'p'%5D%0Aword%20%3D%20%5Bletters%5Bi%5D%20for%20i%20in%20%5B3,%204,%206,%208%5D%5D&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">
                            View in PythonTutor
                        </a>
                    </p>

                </section>

                <section>
                    <h3>Exercise: Divisors</h3>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    def divisors(n):
                        """Returns all the divisors of N.

                        >>> divisors(12)
                        [1, 2, 3, 4, 6]
                        """
                    </code></pre>
                </section>

                <section>
                    <h3>Exercise: Divisors (solution)</h3>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    def divisors(n):
                        """Returns all the divisors of N.

                        >>> divisors(12)
                        [1, 2, 3, 4, 6]
                        """
                        return [x for x in range(1, n) if n % x == 0]
                    </code></pre>
                </section>


                <section>
                    <h3>Exercise: Frontloaded</h3>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    def front(s, f):
                        """Return S but with elements chosen by F at the front.

                        >>> front(range(10), lambda x: x % 2 == 1)  # odds in front
                        [1, 3, 5, 7, 9, 0, 2, 4, 6, 8]
                        """
                    </code></pre>
                </section>

                <section>
                    <h3>Exercise: Frontloaded (solution)</h3>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    def front(s, f):
                        """Return S but with elements chosen by F at the front.

                        >>> front(range(10), lambda x: x % 2 == 1)  # odds in front
                        [1, 3, 5, 7, 9, 0, 2, 4, 6, 8]
                        """
                        return [e for e in s if f(e)] + [e for e in s if not f(e)]
                    </code></pre>
                </section>


                <section class="heading-only">
                    <h2>String literals</h2>
                </section>

                <section>
                    <h3>What's in a string?</h3>

                    <p>Representing data:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    '2,400' '2.400' '1.2e-5' 
                    </code></pre>

                    <p>Representing language:</p>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    """Se lembra quando a gente
                    Chegou um dia a acreditar
                    Que tudo era pra sempre
                    Sem saber
                    Que o pra sempre sempre acaba"""
                    </code></pre>

                    <p>Representing programs:</p>

                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    'curry = lambda f: lambda x: lambda y: f(x, y)'
                    </code></pre>
                </section>

                <section>
                    <h3>String literals: 3 forms</h3>

                    <p>Single quoted strings and double quoted strings are equivalent:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    '您好, I am a string, hear me roar 🦁!'
                    "I've got an apostrophe"
                    </code></pre>

                    <p>Multi-line strings automatically insert new lines:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    """The Zen of Python
                    claims, Readability counts.
                    Read more: import this."""
                    # 'The Zen of Python\nclaims, Readability counts.\nRead more: import this.'
                    </code></pre>

                    <p>The <code>\n</code> is an <strong>escape sequence</strong>
                        signifying a line feed.</p>
                </section>

                <section>
                    <h3>Strings are similar to lists</h3>

                    <pre style="font-size:1.0em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    alfabeto = 'abcdefghijklmnñopqrstuvwxyz'

                    len(alfabeto)  # 27

                    alfabeto[14] + "andu" # ñandu

                    alfabeto + ' ¡Ya conoces el ABC!'
                    </code></pre>
                </section>

                <section>
                    <h3>Differences between strings & lists</h3>
                    <p>A single-character string is the same as the character itself.</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    initial = 'P'
                    initial[0] == initial  <span class="fragment"># True</span>
                    </code></pre>

                    <p>The <code>in</code> operator will match substrings:</p>
                    <pre style="font-size:0.8em; margin-bottom:48px;"><code data-trim data-noescape class="python">
                    'W' in 'Where\'s Waldo'      # True
                    'Waldo' in  'Where\'s Waldo' <span class="fragment"># True</span>
                    </code></pre>
                </section>
            </div>
        </div>     
        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/plugin/highlight/highlight.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/highlightjs-badge@0.1.9/highlightjs-badge.min.js"></script>
        <script>
            const srcUrlPrefix = "https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/";
            Reveal.initialize({
                hash: true,
                center: false,
                slideNumber: true,
                showNotes: false,
                margin: 0.1,
                preloadIframes: true,
                plugins: [ RevealHighlight ],
                pdfSeparateFragments: true
            });

            // add HighlightJS-badge (options are optional)
            var options = {
                copyIconContent: "📄",
                checkIconContent: "✅"
            };
            window.highlightJsBadge(options);

            if (window.location.search == "?print-pdf") {
                var uncounted = document.querySelectorAll("[data-visibility='uncounted']");
                uncounted.forEach(node => {
                    node.parentNode.classList.add("no-print")
                })
            }

        </script>
    </body>
</html>