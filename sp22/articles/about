
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="description" content ="CS 61A: Structure and Interpretation of Computer Programs" />
    <meta name="keywords" content ="CS 61A, Computer Science, CS, 61A, Programming, John DeNero, Berkeley, EECS" />
    <meta name="author" content ="Pamela Fox" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-throttle-debounce/1.1/jquery.ba-throttle-debounce.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="../assets/js/hl.js"></script>
    <script src="../assets/js/toggledarkmode.js"></script>
    <script>
        // we aren't registering builtins since
        //      (1) they don't render differently in the current CSS from other names
        //      (2) it's a mess to list all of them. You can extract from the site but that takes effort
        // if (1) ceases to be true, (2) might be worth the effort. For now, we're leaving as is
        hljsRegister({
            'keyword': "define if cond and or let begin lambda mu quote delay cons-stream set! quasiquote unquote unquote-splicing define-macro"
        });
        hljs.initHighlightingOnLoad();
    </script>
    <script src="../assets/js/dark-mode.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata|Roboto:300,400,500|Work+Sans:400,700">
    <link rel="stylesheet" href="../assets/css/style.css">
    <link rel="stylesheet" href="../assets/css/mono-blue.css">
    <link rel="icon" href="../assets/images/favicon.ico">

    

    <title>
Syllabus & Course Policies | CS 61A Spring 2022
</title>
  </head>

  <body id="index" class="home">
    <nav class="navbar navbar-default navbar-static-top">
      <div class="container noselect">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-section">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="../index.html">
            <img style="max-width:60px; margin-top: -20px;" class="logo" src="../assets/images/logo.png"/>
          </a>
        </div>

        <div class="collapse navbar-collapse" id="navbar-collapse-section">
          <ul class="nav navbar-nav navbar-right">
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="about#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Calendar
                <span class="caret"></span>
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a href="../weekly">Weekly Schedule</a></li>
                <li><a href="../office-hours">Office Hours</a></li>
              </ul>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="about#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Staff
                <span class="caret"></span>
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a href="../instructor">Instructors</a></li>
                <li><a href="../TAs">TAs</a></li>
                <li><a href="../tutors">Tutors</a></li>
                <li><a href="../academic-interns">Academic Interns</a></li>
              </ul>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="about#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Resources
                <span class="caret"></span>
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a href="../resources/index.html">Topical Resources + Past Exams</a></li>
                <li><a href="https://tutor.cs61a.org/">PyTutor</a></li>
                <li><a href="https://code.cs61a.org/">Code</a></li>
                <li><a href="https://piazza.com/class/kxj8vcku7037li" target="_blank">Piazza</a></li>
                <li><a href="campus-res/index.html">Department/Campus Resources</a></li>
              </ul>
            </li>
            <li><a href="about">Syllabus</a></li>
            <li><a href="../contact/index.html">Contact</a></li>
            <li>
              <label class="switch">
                <input type="checkbox" id="toggle-mode-cb">
                <span class="slider round"></span>
              </label>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <main id="content" class="container">
      
<div class='row'>
  <div class='col-md-9'>
    <header>
      <h1>Syllabus & Course Policies</h1>
    </header>
     <h2 id="overview">Overview</h2>


<p>The CS 61 series is an introduction to computer science, with particular
emphasis on software and on machines from a programmer's point of view.</p>

<ol>
  <li>CS 61A concentrates on the idea of abstraction, allowing the programmer to
  think in terms appropriate to the problem rather than in low-level
  operations dictated by the computer hardware.</li>
  <li>CS 61B deals with the more advanced engineering aspects of software, such
  as constructing and analyzing large programs.</li>
  <li>CS 61C focuses on machines and how they execute programs.</li>
</ol>

<p>In CS 61A, we are interested in teaching you about programming, not about how
to use one particular programming language. We consider a series of techniques
for controlling program complexity, such as functional programming, data
abstraction, and object-oriented programming.</p>

<p>CS 61A primarily uses the Python 3 programming language. Python is a popular
language in both industry and academia. It is also particularly well-suited to
the task of exploring the topics taught in this course. It is an open-source
language developed by a large volunteer community that prides itself on the
diversity of its contributors. We will also dive deeper into interpreters, to
which end we'll introduce Regular Expressions, Backus-Naur Form, and the Scheme
programming language.</p>

<p>Mastery of a particular programming language is a very useful side effect of CS
61A. However, our goal is not to dictate what language you use in your future
endeavors. Instead, our hope is that once you have learned the concepts involved
in programming, you will find that picking up a new programming language is but
a few days' work.</p>

<p>A complete list of lecture topics, readings, and assignments appears in the
<a href="../index.html">daily schedule</a>.</p>


<h3 id="prerequisites">Prerequisites</h3>


<p>Math 1A is listed as a corequisite for CS 61A. That is, it may be taken
concurrently. Math 10A or Math 16A are also fine. It is possible to take CS 61A
without knowing or learning calculus; all of the old calculus-based examples
have been removed over the years. However, taking calculus is a great way to
brush up on the arithmetic and algebra that appear regularly in CS 61A.</p>

<p>Though there are no <em>enforced</em> programming-related prerequisites for CS 61A, we
strongly recommend prior Computer Science coursework or other exposure to
programming equivalent to CS 10 or a score of 3 or above on the AP Computer
Science A exam. Some students take the course without any prior programming
experience, but they typically must work substantially harder to master the
material. If you have limited prior experience and you find it challenging to
complete all of the required coursework in the first week, strongly consider
taking another course first. You'll likely have a better experience taking 61A
later, and you won't fall behind in any meaningful way by taking a preparatory
class first. When surveyed, most students mentioned that they found CS 10 very
useful in preparing them for 61A.</p>


<h3 id="preparatory-classes">Preparatory Classes</h3>


<p>To build programming experience before taking CS 61A, we recommend
that you first take a class that introduces you to programming.
The most appropriate class within the Berkeley CS department is CS 10, described
below, but you may also find similar classes at Berkeley extension or in online
courses. Feel free to <a href="../contact/index.html">contact course staff</a> if you are not sure
what's best.</p>


<h4 id="cs-10">CS 10</h4>


<p><a href="http://cs10.org">CS 10: The Beauty and Joy of Computing</a> is an introductory
computer science course which is similar to CS 61A but moves at a friendlier
pace. CS 10 covers variables, functions, recursion, algorithmic complexity,
object-oriented programming, and many other relevant CS 61A topics, with the
overall content overlap being about 50%. CS 10 starts the semester in Snap!,
a block-based programming language which allows students to focus on conceptual
understanding without worrying about unfamiliar syntax. After the midterm, the
course transitions into Python (the primary language 61A uses), applying the
same concepts you already learned to the new language, as well as introducing
new concepts more relevant to Python. CS 10 also covers big ideas and social
implications that go beyond programming, showing you the beauty and joy of
computing.</p>


<h4 id="data-8">Data 8</h4>


<p><a href="http://data8.org/">Data 8: The Foundations of Data Science</a> is an introduction
to data science designed to be accessible and useful for all Berkeley students.
This course was built for students without prior programming experience.  It
teaches students to program in Python 3, but covers a much smaller subset of the
language than CS 61A. Most of the course focuses on data processing and
statistical techniques that are central to using computers to answer questions
about the world. Taking Data 8 before 61A is a good way to gain prior
programming experience, but taking CS 10 is a better way.</p>


<h3 id="alternative-classes">Alternative Classes</h3>


<p>Rather than taking 61A, many students take one of these alternate Berkeley
courses. It is possible to take 61A after taking one of these courses, but there
is so much overlap in content that few students take 61A as well.</p>


<h4 id="cs-88">CS 88</h4>


<p><a href="https://cs88-website.github.io/">CS 88: Computational Structures in Data Science</a>
is an introduction to programming and computing that has more than 50% concept
overlap with CS 61A. It is designed for students interested in data science who
want to expand their knowledge of programming and program structures beyond what
is covered in Data 8. Students who complete CS 88 can either proceed directly to
CS 61B or subsequently take CS 61A, a path that offers a substantial amount of
review because of the high topic overlap between the courses.</p>


<h4 id="info-206a">Info 206A</h4>


<p><a href="https://www.ischool.berkeley.edu/courses/info/206a">Info 206A: Introduction to Programming and Computation</a>
is a 2-unit introduction to programming that overlaps with many topics in the
first eight weeks of CS 61A. Professor Hany Farid has placed all of the
<a href="https://farid.berkeley.edu/downloads/tutorials/learnPython/">videos and exercises for this course online</a>,
and these are an excellent resource to supplement CS 61A.</p>


<h2 id="course-format">Course Format</h2>


<p>The course includes many events and opportunities for learning: lecture, lab,
discussion, office hours, and more. Everyone learns differently, so not all of
these events are required. However, it is recommended that you try everything
out to figure out what combination of these events works best for you.</p>


<h3 id="lecture">Lecture</h3>


<p>There are three 50-minute lectures per week in Wheeler 150. Slides will be
posted before each lecture. A recording of the lecture will be posted soon after
each lecture occurs. This course moves fast, and lecture is tightly coordinated
with section. Please attend or watch each lecture the day it is given and before
you attend section.</p>


<h3 id="section">Section</h3>


<p>There are two sections each week: one lab and one discussion. These sections
are run by an amazing group of teaching assistants who have been carefully
selected for their ability, enthusiasm, and dedication to learning. Getting to
know your TA is an excellent way to succeed in this course.</p>


<h3 id="exam-prep">Exam Prep</h3>


<p>Exam prep sessions will be held every Friday from 9:30am to 11am starting 1/28.
The goal will be to recap the past week's material by way of going over past
exam problems related to that material, as well as exploring some test-taking
strategies. The problem walkthroughs will be recorded, so if you can't attend
live, you'll still be able to watch the walkthroughs on your own.</p>


<h3 id="office-hours">Office Hours</h3>


<p>In office hours, you can ask questions about the material, receive guidance on
assignments, and work with peers and course staff in a small group setting. See
the <a href="../office-hours">office hour schedule</a> and come by in person or book an
appointment online on the <a href="https://oh.cs61a.org/appointments">OH Queue</a>.
Appointments for each week will be opened on Sunday afternoons, but we don't
anticipate appointments to run out. If they do, you're still welcome to swing by
in person, as well as post on Piazza.</p>


<h4 id="advising-oh">Advising OH</h4>


<p>A couple of head TAs and TAs will also offer advising office hours, which are
designed to help you navigate CS at Berkeley, Berkeley overall, and really
anything that we're able to advise you on. You can book those appointments
using any of these TAs' links from the blurb on the <a href="../office-hours">OH page</a>.</p>


<h2 id="assignments">Assignments</h2>


<p>Each week, there will be problems assigned for you to work on, most of which
will involve writing and analyzing programs. These assignments come in three
categories: lab exercises, homework assignments, and projects.</p>


<h3 id="labs">Labs</h3>


<p>Lab exercises are designed to introduce a new topic. You can complete and
submit these during the scheduled lab sections or any time before the deadline.
Most students find that attending lab and collaborating with other students
there is much more useful than working on lab assignments independently. We
strongly encourage you to attend and collaborate on labs.</p>

<p>Lab exercises are scored on correct completion. To receive credit, you must
complete all of the problems that are not marked as optional and pass all
tests. There is no partial credit on labs.</p>


<h3 id="homework">Homework</h3>


<p>Weekly homework assignments let you apply the concepts learned in lecture and
section to more challenging problems. Homeworks will typically be released on
Fridays and due the following Thursday.</p>


<h4 id="partial-credit">Partial Credit</h4>


<p>Homework is scored out of 2 points, and every incorrect question costs you 1
point.</p>


<h4 id="homework-recovery-policy">Homework Recovery Policy</h4>


<p>You can recover one question per homework by attending a homework recovery
session. Logistics will be released after the first homework assignment is due.</p>

<p>Recovery sessions describe how to approach and solve a past homework problem.
You are welcome to attend these even if you don't need the recovery point.</p>


<h3 id="projects">Projects</h3>


<p>Projects are larger assignments intended to combine ideas from the course in
interesting ways.</p>

<p>You are allowed and encouraged to <a href="pair-programming">pair program</a>
with a partner. Make sure to alternate roles so that both of you understand the
complete results.  We recommend finding a partner in your section, but course
staff will also help with partner matching at various points in the semester.
It is your responsibility to contact and collaborate with your partner. You may
also work alone on all projects, although partners are recommended.</p>

<p>Projects are graded on correctness.</p>


<h2 id="exams">Exams</h2>


<p>There will be three exams:</p>

<ul>
  <li>Midterm 1 will be held 8pm-10pm on Monday, 2/7.</li>
  <li>Midterm 2 will be held 8pm-10pm on Thursday, 3/17.</li>
  <li>The final exam will be held 11:30am-2:30pm on Tuesday, 5/10.</li>
</ul>

<p>Exams will be taken on paper on campus in designated exam rooms.
In the event that in-person exams are not allowed due to campus closure
or room occupancy restriction, exams will be delivered remotely.</p>

<p>You will be allowed to request a remote exam or other exam accommodations
under specific circumstances. Details on how to request these for each exam
will be released around 10-14 days prior to each exam.</p>

<p>Unlike some courses, the particular subject matter of CS 61A makes it very
difficult to ensure a fair exam in which many students are taking the exam in
person and many others are taking it remotely. Since it is not likely that all
on-campus students will have a suitable space to take a remote exam
simultaneously, an in-person exam is the best available option, and this is why
the default exam format is in-person.</p>

<p>Students who are enrolled in another course with a conflicting final exam time
may take the CS 61A final exam in the next exam slot: 3pm-6pm on Tuesday,
5/10. Proof of enrollment in a conflicting course will be required. This
information will be collected around 2-3 weeks before the final exam.</p>


<h2 id="accommodations-dsp-and-otherwise">Accommodations (DSP and Otherwise)</h2>


<p>We will provide appropriate accommodations to all students enrolled in
Berkeley's Disabled Students Program (DSP). To ensure that you recieve the
appropriate accommodations, have your DSP specialist send us a letter confirming
your status and accommodations. We also aim to provide fair and appropriate
accommodations to any students who, because of extenuating circumstances, may
need them. For information on how to request accommodations, please see the
"Accommodations Appointments" section below.</p>


<h3 id="privacy">Privacy</h3>


<p>All DSP and accommodations-related materials for this course are kept in a
repository separate from the rest of the course materials, that is visible only
to the instructor and selected staff.</p>

<p>For any DSP and accommodations-related communications, we recommend that you
reach out to Cooper
(<a href="mailto:cooper.bedin@berkeley.edu">cooper.bedin@berkeley.edu</a>) directly and NOT
to cs61a@berkeley.edu, as that inbox is visible to some other members of course
staff. The instructor (Pamela) and head TA (Vanshaj) may be informed of
DSP-related communications as needed, particularly if they concern exam
accommodations.</p>

<p>If you believe your accommodations may affect the TA who is teaching your
section, and would like to inform that TA, you may wish to email Cooper
(<a href="mailto:cooper.bedin@berkeley.edu">cooper.bedin@berkeley.edu</a>). They can inform
your section TA on your behalf.</p>


<h3 id="accommodations-appointments">Accommodations Appointments</h3>


<p>If you're not enrolled in DSP, or are in the process of being onboarded by DSP,
you may still be eligible for accommodations. You may also be eligible for
accommodations if serious extenuating circumstances should come up during the
semester.</p>

<p>If you believe you may require accommodations, please visit
<a href="https://go.cs61a.org/accommodation-appts">this calendar</a> to book a short
(20-minute) appointment with our Student Support TA, Cooper Bedin. You can also
reach them via email at at
<a href="mailto:cooper.bedin@berkeley.edu">cooper.bedin@berkeley.edu</a>.</p>


<h3 id="extensions">Extensions</h3>


<p>If you need to request an extension, regardless of your DSP status, fill out
<a href="https://go.cs61a.org/extensions">this form</a>. Submissions to this form will be
visible only to Cooper, Vanshaj, and Pamela, and will be processed as quickly as
possible.</p>

<p>Any extension request up to 24 hours will be approved automatically, so long as
it is made in good faith. Any extension request up to 3 days made by a student
with a DSP accommodation for assignment exensions will be approved
automatically. All other extensions will be handled on a case-by-case basis.</p>

<p>There will <em>never</em> be a penalty for requesting an extension—we understand that
life happens, especially considering the current state of the world, and we want
to ensure that all students are provided with the support and flexibility they
need to succeed, regardless of personal circumstances.</p>


<h2 id="resources">Resources</h2>



<h3 id="textbook">Textbook</h3>


<p>The online textbook for the course is
<a href="http://composingprograms.com/">Composing Programs</a>, which was created
specifically for this course, based on the classic textbook
<a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">Structure and Interpretation of Computer Programs</a>.
Readings for each lecture appear in the course schedule. We recommend that you
complete the readings before attending lecture.</p>


<h3 id="supplemental-material">Supplemental Material</h3>


<p>Lots of additional study materials including past exams appear on the
<a href="https://cs61a.org/resources">Resources</a> page.</p>


<h2 id="grading">Grading</h2>


<p>Your course grade is computed using a point system with a total of 300 points,
broken down as follows:</p>

<ul>
  <li>Midterm 1, worth 40 points</li>
  <li>Midterm 2, worth 50 points</li>
  <li>Final Exam, worth 75 points</li>
  <li>Projects, worth 99 points</li>
  <li>Homework, worth 16 points</li>
  <li>Lab, worth 10 points</li>
  <li>Lab Participation, worth 5 points</li>
  <li>Discussion Participation, worth 5 points</li>
</ul>

<p>There are a handful extra credit points throughout the semester, perhaps around
10, that are available to everyone.</p>

<p>Each letter grade for the course corresponds to a range of scores:</p>

<pre><code>A+  ≥ 305    A  ≥ 285    A&#x2d;  ≥ 270
B+  ≥ 250    B  ≥ 225    B&#x2d;  ≥ 205
C+  ≥ 190    C  ≥ 180    C&#x2d;  ≥ 175
D+  ≥ 170    D  ≥ 165    D&#x2d;  ≥ 160</code></pre>

<p>Your final score will be rounded to the nearest integer before being converted
to a letter grade. 0.5 rounds up to 1, but 0.49 rounds down to 0.</p>

<p>There is no curve; your grade will depend only on how well you do, and not on
how well everyone else does. Score thresholds are based on how students
performed in previous semesters. Unlike some previous semesters you may have
heard about, these thresholds <strong>will not be adjusted</strong> based on student
performance. You could all get A's. You could all get D's.</p>

<p>These are the exact thresholds that will be used at the end of the course to
assign grades. In a typical semester, about 60% of students taking the course
for a letter grade will receive a B+ or higher.</p>

<p>Incomplete grades will be granted only for medical or personal emergencies that
cause you to miss the final or last part of the course, only for students who
have completed the majority of the coursework, and only if work up to the point
of the emergency has been satisfactory.</p>

<p>Your lowest homework score will be dropped.</p>

<p>Each lab that you complete is worth 1 point, and you can receive a maximum of 10
lab points. There are going to be at least 12 lab assignments, so you can skip
some and still get full credit.</p>


<h3 id="lab-participation">Lab Participation</h3>


<p>The lab participation score is designed to make sure that all students attend
at least the first few weeks of lab sections to try them out.</p>

<p>Attending a lab will earn you one lab participation credit. There will be about
12 possible credits available.</p>

<p>To earn a perfect lab participation score in the course, you need to earn at
least 5 credits. Your course lab participation score is the number of lab
participation credits you earn over the semester, up to 5. These are separate
from the lab score component, which is graded based on lab completion and
correctness.</p>


<h3 id="discussion-participation">Discussion Participation</h3>


<p>The discussion participation score is designed to make sure that all students
attend at least the first few weeks of discussion sections to try them out.
Continuing to attend provides a safety net in case of a low midterm score.</p>

<p>Attending a discussion will earn you one discussion participation credit. There
will be about 12 possible credits available (Discussion 0 does not count).</p>

<p>To earn a perfect discussion participation score in the course, you need to
earn at least 5 credits. Your course discussion participation score is the
number of discussion participation credits you earn over the semester, up to 5.</p>


<h3 id="midterm-recovery">Midterm Recovery</h3>


<p>Discussion participation credits also contribute to recovery points on midterms.
Earning 10 or more discussion participation credits will give you the maximum
amount of midterm recovery.</p>

<p>We calculate your midterm recovery using the following logic, where
<code>participation</code> is the number of participation credits you earn:</p>

<pre><code>def exam_recovery(your_exam_score, participation, max_exam_score, cap=10):
    half_score = max_exam_score / 2
    max_recovery = max(0, (half_score &#x2d; your_exam_score) / 2)
    recovery_ratio = min(participation, cap) / cap
    return max_recovery * recovery_ratio</code></pre>

<p>According to this formula, if you receive more than half the available points on
each midterm, then you don't recover any points. If you score just below half
the points, you will recover a few points. If you score far below half the
points, you will recover many points. The more recovery credits you earn, the
more exam points will be recovered.</p>

<p>Additionally, what matters for exam recovery is the fraction (out of 10) of the
total possible discussion participation credits you receive, not the absolute
number of discussion participation credits.</p>

<p>The purpose of this policy is to ensure that students who continue to invest
time in the course throughout the semester are able to pass.</p>

<p>There are no recovery points available on the final exam.</p>


<h3 id="late-policy">Late Policy</h3>


<p>If you cannot turn in an assignment on time, <a href="../contact/index.html">contact course staff</a>
and (for projects) your partner as early as possible. Depending on the
circumstance, we may grant extensions (see the Extensions sections for how
to request one).</p>

<ul>
  <li><strong>Labs</strong>: We rarely accept late lab submissions.</li>
  <li><strong>Homework</strong>: We rarely accept late homework submissions.</li>
  <li><strong>Projects</strong>: Submissions within 48 hours after the deadline will receive
  75% of the earned score. Submissions that are 48 hours or more after the
  deadline will receive 0 points.</li>
</ul>


<h3 id="citizenship">Citizenship</h3>


<p>For exceptionally rude or disrespectful behavior toward the course staff or
other students, your final grade will be lowered by up to a full letter grade
(e.g., from an A- to a B-) at the discretion of the course instructors. You
don't need to be concerned about this policy if you treat other human beings
with even a bare minimum of respect and consideration and do not engage in
behavior that is actively harmful to others.</p>


<h3 id="pass-it-forward">Pass it Forward!</h3>


<p>We want to encourage you to collaborate with your fellow students and to help
each other learn, especially if you are someone coming into CS61A with more
experience than others. To this end, we're introducing the idea of Passing it
Forward, which essentially means that we will be looking out for students who go
above and beyond to help their peers learn, whether through virtual or physical
means. This sort of activity will be taken into account when final grades are
being assigned, though you should not expect massive grade changes to come as a
result of this.</p>


<h2 id="learning-cooperatively">Learning Cooperatively</h2>


<p>With the obvious exception of exams, we encourage you to discuss course
activities with your friends and classmates as you are working on them. You will
learn more in this class if you work with others than if you do not. Ask
questions, answer questions, and share ideas liberally.</p>

<p>Learning cooperatively is different from sharing answers. You shouldn't be
showing your code to other students or looking at others' code, except:</p>

<ul>
  <li>During lab, you can share all you want as long as you're all learning.</li>
  <li>For a project that allows partners, you can share anything with your partner.</li>
  <li>If you've finished a problem already, you can look at others' code to help
  them finish.</li>
</ul>

<p>If you are helping another student, don't just tell them the answer; they will
learn very little and run into trouble on exams. Instead, try to guide them
toward discovering the solution on their own. Problem solving practice is the
key to progress in computer science.</p>

<p>Since you're working collaboratively, keep your project partner informed. If
some medical or personal emergency takes you away from the course for an
extended period, or if you decide to drop the course for any reason, please
don't just disappear silently! You should inform your project partner, so that
nobody is depending on you to do something you can't finish.</p>


<h3 id="academic-misconduct">Academic Misconduct</h3>


<p>Any students caught collaborating on exams will receive an F in the course.
Please don't be one of these students.</p>

<p>Reading others' homework or project solution to a problem before you solve that
problem on your own will incur large point penalties. You are free to discuss
the problems with others beforehand, but you must write your own solutions. The
exception to this rule is that you may share code with your project partner.</p>

<p>If you are unsure if what you are doing constitutes academic misconduct, please
clarify with the instructor or <a href="https://cs61a.org/contact">contact course staff</a>. The following
is a list of things you should NOT do. This list is not exhaustive, but covers
most of the big offenses:</p>

<ul>
  <li>Do not copy code from any student who is not your partner.</li>
  <li>Do not allow any student other than your partner to copy code from you.</li>
  <li>Do not copy solutions from online sources such as Stack Overflow, Pastebin,
  and public repositories on GitHub.</li>
  <li>Do not read others' solutions to an assignment before you have completed the
  assignment</li>
  <li>Do not post your solutions publicly during or after the semester.</li>
</ul>

<p>If you find a solution online, please <a href="https://goo.gl/forms/nL2yOj1Z81HcQYDi2">submit a link to that solution
anonymously</a>. When we find an online
solution, we ask the author to remove it. We also record the solution and use it
to check for copying. By reporting online solutions, you help keep the course
fair for everyone.</p>

<p>In summary, we expect you to hand in your own work, take your own tests, and
complete projects with code written only by you and your partner. The
assignments and evaluations are structured to help you learn, which is why you
are here.</p>

<p>Rather than copying someone else's work, ask for help. You are not alone in
this course! The entire staff is here to help you succeed. If you invest the
time to learn the material and complete the projects, you won't need to copy
any answers.</p>


<h2 id="a-parting-thought">A Parting Thought</h2>


<p>Grades and penalties aren't the purpose of this course. We really just want you
to learn. The entire staff is very excited to be teaching CS 61A this semester
and we're looking forward to meeting such a large and enthusiastic group of
students. We want all of you to be successful here. Welcome to CS 61A!</p>
  </div>

  <div class='col-md-3 sticky'>
    <nav class='hidden-print hidden-sm hidden-xs sidebar'>
      <ul>
  <li><a href="about#overview">Overview</a></li>
  <ul>
    <li><a href="about#prerequisites">Prerequisites</a></li>
    <li><a href="about#preparatory-classes">Preparatory Classes</a></li>
    <ul>
      <li><a href="about#cs-10">CS 10</a></li>
      <li><a href="about#data-8">Data 8</a></li>
    </ul>
    <li><a href="about#alternative-classes">Alternative Classes</a></li>
    <ul>
      <li><a href="about#cs-88">CS 88</a></li>
      <li><a href="about#info-206a">Info 206A</a></li>
    </ul>
  </ul>
  <li><a href="about#course-format">Course Format</a></li>
  <ul>
    <li><a href="about#lecture">Lecture</a></li>
    <li><a href="about#section">Section</a></li>
    <li><a href="about#exam-prep">Exam Prep</a></li>
    <li><a href="about#office-hours">Office Hours</a></li>
    <ul>
      <li><a href="about#advising-oh">Advising OH</a></li>
    </ul>
  </ul>
  <li><a href="about#assignments">Assignments</a></li>
  <ul>
    <li><a href="about#labs">Labs</a></li>
    <li><a href="about#homework">Homework</a></li>
    <ul>
      <li><a href="about#partial-credit">Partial Credit</a></li>
      <li><a href="about#homework-recovery-policy">Homework Recovery Policy</a></li>
    </ul>
    <li><a href="about#projects">Projects</a></li>
  </ul>
  <li><a href="about#exams">Exams</a></li>
  <li><a href="about#accommodations-dsp-and-otherwise">Accommodations (DSP and Otherwise)</a></li>
  <ul>
    <li><a href="about#privacy">Privacy</a></li>
    <li><a href="about#accommodations-appointments">Accommodations Appointments</a></li>
    <li><a href="about#extensions">Extensions</a></li>
  </ul>
  <li><a href="about#resources">Resources</a></li>
  <ul>
    <li><a href="about#textbook">Textbook</a></li>
    <li><a href="about#supplemental-material">Supplemental Material</a></li>
  </ul>
  <li><a href="about#grading">Grading</a></li>
  <ul>
    <li><a href="about#lab-participation">Lab Participation</a></li>
    <li><a href="about#discussion-participation">Discussion Participation</a></li>
    <li><a href="about#midterm-recovery">Midterm Recovery</a></li>
    <li><a href="about#late-policy">Late Policy</a></li>
    <li><a href="about#citizenship">Citizenship</a></li>
    <li><a href="about#pass-it-forward">Pass it Forward!</a></li>
  </ul>
  <li><a href="about#learning-cooperatively">Learning Cooperatively</a></li>
  <ul>
    <li><a href="about#academic-misconduct">Academic Misconduct</a></li>
  </ul>
  <li><a href="about#a-parting-thought">A Parting Thought</a></li>
</ul>
    </nav>
  </div>
</div>

    </main>

    <footer class="container">
      <div class="row text-center">
        <div class="col col-sm-4">
          <h3><a href="../index.html">CS 61A</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="../weekly">Weekly Schedule</a></li>
            <li><a href="../office-hours">Office Hours</a></li>
            <li><a href="../staff">Staff</a></li>
          </ul>
        </div>
        <div class="col col-sm-4">
          <h3><a href="https://cs61a.org/resources">Resources</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="studying">Studying Guide</a></li>
            <li><a href="debugging">Debugging Guide</a></li>
            <li><a href="composition">Composition Guide</a></li>
            <li><a href="pair-programming">Pair Programming</a></li>
          </ul>
        </div>
        <div class="col col-sm-4">
          <h3><a href="about">Policies</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="about#assignments">Assignments</a></li>
            <li><a href="about#exams">Exams</a></li>
            <li><a href="about#grading">Grading</a></li>
          </ul>
        </div>
      </div>
    </footer>

    

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs/loader.min.js"></script>
  <link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs/editor/editor.main.min.css">
  <script>
      require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs' }});
      window.MonacoEnvironment = { getWorkerUrl: () => URL.createObjectURL(new Blob([`
      self.MonacoEnvironment = {
          baseUrl: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min'
      };
      importScripts('https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs/base/worker/workerMain.min.js');
  `], { type: 'text/javascript' }))
  };
  </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.15.5/js/jsplumb.min.js"></script>
    <script src="../assets/js/network_storage.js"></script>
    <script src="../assets/js/storable.js"></script>
    <script src="../assets/js/editor.js"></script>
    <script src="../assets/js/copy-button.js"></script>
    <script src="../assets/js/env-diagram.js"></script>
    
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.15.5/js/jsplumb.min.js"></script>
<script src="../assets/js/storable.js"></script>
<script src="../assets/js/env-diagram.js"></script>
<script>
  $('.sidebar ul').addClass('nav nav-stacked noselect');
  $('body').scrollspy({
    target: '.sidebar',
    offset: 40
  });
</script>

  </body>
</html>