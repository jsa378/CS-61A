<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
		<title>MT2 Review Part 2</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reset.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.css">
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/theme/simple.css" id="theme">
		<link rel="stylesheet" href="../css/mono-blue.css">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata|Roboto:300,400,500|Work+Sans:400,700">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/katex.min.css" integrity="sha384-6LkG2wmY8FK9E0vU9OOr8UvLwsaqUg9SETfpq4uTCN1agNe8HRdE9ABlk+fVx6gZ" crossorigin="anonymous">
		<style>
			.reveal {
				font-family: "Work Sans", sans-serif;
			}

			.reveal .slides section {
				text-align: left;
				font-size: smaller;
			}

			.reveal pre {
				background-color: #f5f5f5;
				width: 100%;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-shadow: none;
			}

			.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
				font-family: "Roboto", sans-serif;
				color: #0072c1;
			}

			.reveal section.heading-only {
				text-align:center;
				padding-top:20%;
			}

            .no-code-badge .code-badge {
                display: none;
            }

            .code-badge-language {
                display: none;
            }

			.python-tutor-link {
				font-size: smaller;
			}

			.python-tutor-link:before {
				content: "";
				display: block;
				background: url("http://pythontutor.com/favicon.ico") no-repeat;
				width: 48px;
				height: 48px;
				float: left;
				margin: 0 6px 0 0;
			}

			.reveal h3 {
				margin-bottom: 40px;
			}

            .smaller {
                font-size: smaller;
            }

            code {
                padding: 2px 4px;
                font-size: 90%;
                color: #0072c1;
                background-color: #f9f2f4;
                border-radius: 4px;
            }

            p.padded {
                margin-top: 32px;
            }

            section .row {
                display: flex;
            }

            section .column {
                flex: 48%;
                margin: 10px;
            }

			@media print
			{
				.no-print, .no-print *
				{
					display: none !important;
				}
			}


            .regex-input {
                border:1px solid rgb(204, 204, 204);
                background: rgb(245, 245, 245);
                padding: 8px;
            }

            .regex-input input {
                font-size: inherit;
            }

            .regex-input input[type=text]:invalid {
                background-color: pink;
            }

		</style>
        <style>
            .env-diagram {
                position: relative;
                font-family: monospace;
                font-size: 18px;
            }
            .env-diagram-frame table.table {
                margin: 0px;
            }
            .env-diagram .env-diagram-frame, .env-diagram .env-diagram-objects {
                width: 310px;
                border-left: 1px solid #aaa;
                margin-bottom: 15px;
                padding: 8px;
            }
            .env-diagram .env-diagram-frame.current {
                background: #e2ebf6;
            }
            .env-diagram .env-diagram-frame td, .env-diagram .env-diagram-objects td {
                font-size: smaller;
            }
            .env-diagram .env-diagram-connector {
                color: #005583;
            }
            .env-diagram .env-diagram-objects {
                float: right;
            }
            .env-diagram .env-diagram-objects ul {
                list-style: none;
                padding: 0;
                margin: 0;
            }
            .env-diagram .env-diagram-objects td {
                width: 230px;
            }
            .env-diagram .env-diagram-objects .env-diagram-connector {
                margin-right: 8px;
            }
            .env-diagram .env-diagram-objects .env-diagram-trash {
                padding-top: 6px;
                margin-top: 12px;
            }
            .env-diagram .env-diagram-frame > div {
                margin-bottom: 10px;
            }
            .env-diagram .env-diagram-frame > div input {
                width: 90px;
            }
            .env-diagram .env-diagram-frame > div input:first-of-type {
                margin-right: 8px;
            }
            .env-diagram .env-diagram-frame table {
                margin-bottom: 0px;
            }
            .env-diagram .env-diagram-frame table input {
                width: 100px;
            }
            .env-diagram .env-diagram-frame table tbody td {
                padding: 2px;
                padding-right: 6px;
                height: 24px;
            }
            .env-diagram .env-diagram-frame table tbody td:first-child {
                text-align: right;
                width: 105px;
            }
            .env-diagram .env-diagram-frame table tbody td:nth-child(2) {
                width: 60px;
                border-left: 1px solid black;
                border-bottom: 1px solid black;
            }
            .env-diagram .env-diagram-frame .env-diagram-connector {
                margin-left: 12px;
            }
            .numbered-code ol {
                line-height: 1.7em;
                font-size: 1.0em;
                margin: 20px auto;
                width: 100%;
            }
            .numbered-code li {
                position: relative;
            }
            .numbered-code .line-arrow {
                position: absolute;
                right: 8px;
                bottom: 0px;
                font-size: 0.7em;
            }
            .numbered-code .line-current {
                color: blue;
            } 
            .numbered-code .line-previous {
                color: rgb(171, 171, 202);
            } 
        </style>
        <style>
        .circle-marker {
            position: absolute;
            background: blue;
            color: white;
            font-size: 20px;
            border-radius: 30px;
            width: 30px;
            height: 30px;
            text-align: center;
        }
        .circle-marker-arc {
            position: absolute;
            width: 60px;
            height: 90px;
            background: transparent;
            border-radius: 100px;
            border-left: 1px solid blue;
        }
        </style>
        <style>
        .bordered {
            border: 1px dashed blue;
            border-radius: 8px;
            padding: 6px;
            --balloon-font-size: 20px;
        }
        </style>
	</head>
	<body>
		<div class="reveal">
			<div class="slides">


				<section class="heading-only" style="padding-top:5%">
                    <h1>MT2 Review Pt 2</h1>

					<div class="no-print" style="text-align: left; margin-top: 100px; font-size: 70%;">
						Tips for navigating the slides:
						<ul>
							<li>Press O or Escape for overview mode.</li>
							<li>Visit <a href="23-MT2_Review_Part_2.html?print-pdf" target="_blank">this link</a> for a nice printable version</li>
							<li>Press the copy icon on the upper right of code blocks to copy the code</li>
						</ul>
                    </div>

                    <aside class="speaker-notes">
                    </aside>
				</section>


                <section>
                    <h3>Class outline:</h3>

                    <ul>
                        <li>Lists & dicts
                        <li>Lists in environment diagrams
                        <li>Objects
                    </ul>
                </section>

                <section class="heading-only">
                    <h2>Lists & dicts</h2>
                </section>


                <section>
                    <h3>Exercise: Element comparer</h3>

                    <p>Does every element equal some other element in s?</p>

                    <pre style="font-size:0.6em" class="no-code-badge"><code data-trim data-noescape class="text">
                    [-4, -3, -2, 3, 2, 4] → False
                    [4, 3, 2, 3, 2, 4]    → True
                    </code></pre>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    def all_have_an_equal(s):
                        """Does every element equal some other element in s?

                        >>> all_have_an_equal([-4, -3, -2, 3, 2, 4])
                        False
                        >>> all_have_an_equal([4, 3, 2, 3, 2, 4])
                        True
                        """
                    </code></pre>
                </section>


                <section>
                    <h3>Exercise: Element comparer (Solution)</h3>

                    <p>Does every element equal some other element in s?</p>

                    <pre style="font-size:0.6em" class="no-code-badge"><code data-trim data-noescape class="text">
                    [-4, -3, -2, 3, 2, 4] → False
                    [4, 3, 2, 3, 2, 4]    → True
                    </code></pre>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    def all_have_an_equal(s):
                        """Does every element equal some other element in s?

                        >>> all_have_an_equal([-4, -3, -2, 3, 2, 4])
                        False
                        >>> all_have_an_equal([4, 3, 2, 3, 2, 4])
                        True
                        """
                        return min([sum([1 for y in s if x == y]) for x in s]) > 1
                        # OR
                        return all([s[i] in s[:i] + s[i+1:] for i in range(len(s))])
                        # OR
                        return all(map(lambda x: s.count(x) > 1, s))
                    </code></pre>
                </section>
                
                <section>
                    <h3>Exercise: Digits dictionary</h3>

                    <p>Create a dictionary mapping each digit d to the lists of elements in s that end with d.</p>

                    <pre style="font-size:0.6em" class="no-code-badge"><code data-trim data-noescape>
                    [5, 8, 13, 21, 34, 55, 89] → {1: [21], 3: [13], 4: [34], 5: [5, 55], 8: [8], 9: [89]}
                    </code></pre>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    def digit_dict(s):
                        """Map each digit d to the lists of elements in s that end with d.
                    
                        >>> digit_dict([5, 8, 13, 21, 34, 55, 89])
                        {1: [21], 3: [13], 4: [34], 5: [5, 55], 8: [8], 9: [89]}
                        """
                    </code></pre>
                </section>


                <section>
                    <h3>Exercise: Digits dictionary (Solution)</h3>

                    <p>Create a dictionary mapping each digit d to the lists of elements in s that end with d.</p>

                    <pre style="font-size:0.6em" class="no-code-badge"><code data-trim data-noescape>
                    [5, 8, 13, 21, 34, 55, 89] → {1: [21], 3: [13], 4: [34], 5: [5, 55], 8: [8], 9: [89]}
                    </code></pre>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    def digit_dict(s):
                        """Map each digit d to the lists of elements in s that end with d.
                    
                        >>> digit_dict([5, 8, 13, 21, 34, 55, 89])
                        {1: [21], 3: [13], 4: [34], 5: [5, 55], 8: [8], 9: [89]}
                        """
                        return {i: [x for x in s if x % 10 == i]
                                for i in range(10) if any([x % 10 == i for x in s])}
                        # OR
                        last_digits = list(map(lambda x: x % 10, s))
                        return {i: [x for x in s if x % 10 == i]
                                for i in range(10) if i in last_digits}
                    </code></pre>
                </section>


                <section class="heading-only">
                    <h2>Lists in environment diagrams</h2>
                </section>

                <section>
                    <h3>List operations</h3>
                    
                    <p>Starting from:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    s = [2, 3]
                    t = [5, 6]
                    </code></pre>

                    <table>
                        <thead>
                            <tr>
                                <th>Operation
                                <th style="width:250px;">Example
                                <th>Result
                        <tbody>
                            <tr>
                                <td style="font-size:0.7em;"><code>append</code> adds one
                                    element to a list
                                <td>
                                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                    s.append(t)
                                    t = 0
                                    </code></pre>
                                <td>
                                    <pre style="font-size:0.7em" class="no-code-badge fragment"><code data-trim data-noescape class="python">
                                    s → [2, 3, [5, 6]]
                                    t → 0
                                    </code></pre>
                            <tr>
                                <td style="font-size:0.7em;"><code>extend</code> adds all
                                    elements in one list
                                    to another list
                                <td>
                                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                    s.extend(t)
                                    t[1] = 0
                                    </code></pre>
                                <td>
                                    <pre style="font-size:0.7em" class="no-code-badge fragment"><code data-trim data-noescape class="python">
                                    s → [2, 3, 5, 6]
                                    t → [5, 0]
                                    </code></pre>
                            <tr>
                                <td style="font-size:0.7em;">addition & slicing
                                    create new lists
                                    containing existing
                                    elements
                                <td>
                                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                    a = s + [t]
                                    b = a[1:]
                                    a[1] = 9
                                    b[1][1] = 0
                                    </code></pre>
                                <td>
                                    <pre style="font-size:0.7em" class="no-code-badge fragment"><code data-trim data-noescape class="python">
                                    s → [2, 3]
                                    t → [5, 0]
                                    a → [2, 9, [5, 0]]
                                    b → [3, [5, 0]]
                                    </code></pre>
                    </table>

                </section>



                <section>
                    <h3>List operations</h3>
                    
                    <p>Starting from:</p>
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    s = [2, 3]
                    t = [5, 6]
                    </code></pre>

                    <table>
                        <thead>
                            <tr>
                                <th>Operation
                                <th style="width:250px;">Example
                                <th>Result
                        <tbody>
                            <tr>
                                <td style="font-size:0.7em;">The <code>list</code> constructor
                                    also creates a new
                                    list containing
                                    existing elements
                                <td>
                                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                    t = list(s)
                                    s[1] = 0
                                    </code></pre>
                                <td>
                                    <pre style="font-size:0.7em" class="no-code-badge fragment"><code data-trim data-noescape class="python">
                                    s → [2, 0]
                                    t → [2, 3]
                                    </code></pre>
                            <tr>
                                <td style="font-size:0.7em;">slice assignment
                                    replaces a slice with
                                    new values
                                <td>
                                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                                    s[0:0] = t
                                    s[3:] = t
                                    t[1] = 0
                                    </code></pre>
                                <td>
                                    <pre style="font-size:0.7em" class="no-code-badge fragment"><code data-trim data-noescape class="python">
                                    s → [5, 6, 2, 5, 6]
                                    t → [5, 0]
                                    </code></pre>
                    </table>

                </section>

                <section>
                    <h3>Lists in lists</h3>
                    
                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    t = [1, 2, 3]
                    t[1:3] = [t]
                    t.extend(t)
                    </code></pre>

                    <p class="python-tutor-link">
                        <a target="_blank" href="https://pythontutor.com/composingprograms.html#code=t%20%3D%20%5B1,%202,%203%5D%0At%5B1%3A3%5D%20%3D%20%5Bt%5D%0At.extend%28t%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">View in PythonTutor</a>
                    </p>

                    <pre style="font-size:0.7em"><code data-trim data-noescape class="python">
                    t = [[1, 2], [3, 4]]
                    t[0].append(t[1:2])
                    </code></pre>

                    <p class="python-tutor-link">
                        <a target="_blank" href="https://pythontutor.com/composingprograms.html#code=t%20%3D%20%5B%5B1,%202%5D,%20%5B3,%204%5D%5D%0At%5B0%5D.append%28t%5B1%3A2%5D%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">View in PythonTutor</a>
                    </p>

                </section> 
                
                <section class="heading-only">
                    <h2>OOP</h2>
                </section>

                <section>
                    
                    <h3>Matrix Representations</h3>

                    <p>Fill in the class implementation to match the doctests.</p>

                    <pre style="font-size:0.4em"><code data-trim data-noescape class="python">
                    class Matrix:
                        """
                        >>> m = Matrix(3, 3, [1, 0, 1, 1, 1, 1, 0, 0, 1])
                        >>> m
                        Matrix(3, 3, [1, 0, 1, 1, 1, 1, 0, 0, 1])
                        >>> print(m)
                        1 0 1
                        1 1 1
                        0 0 1
                        >>> m2 = Matrix(3, 2, [124, 56, 254, 0, 100, 225])
                        >>> m2
                        Matrix(3, 2, [124, 56, 254, 0, 100, 225])
                        >>> print(m2)
                        124 56 254
                        0 100 225
                        """
                        def __init__(self, w, h, values):
                            _________________

                        def __repr__(self):
                            _________________

                        def __str__(self):
                            _________________
                    </code></pre>
                </section>


                <section>
                    
                    <h3>Matrix Representations (Solution)</h3>
                    
                    <pre style="font-size:0.55em; height: 570px;"><code data-trim data-noescape class="python">
                    class Matrix:
                        """
                        >>> m2 = Matrix(3, 2, [124, 56, 254, 0, 100, 225])
                        >>> m2
                        Matrix(3, 2, [124, 56, 254, 0, 100, 225])
                        >>> print(m2)
                        124 56 254
                        0 100 225
                        """
                        def __init__(self, w, h, values):
                            self.width = w
                            self.height = h
                            self.values = values
                    
                        def __repr__(self):
                            return f"Matrix({self.width}, {self.height}, {self.values})"
                
                        def __str__(self):
                            grid_lines = []
                            for h in range(self.height):
                                grid_line = []
                                for w in range(self.width):
                                    grid_line.append(str(self.values[(h * self.width) + w]))
                                grid_lines.append(' '.join(grid_line))
                            return '\n'.join(grid_lines)
                    
                    </code></pre>
                </section>

                <section>
                    <h3>Table Representations</h3>

                    <pre style="font-size:0.5em; height: 550px;"><code data-trim data-noescape class="python">
                    class Table(Matrix):
                        """
                        >>> t = Table(2, 3, ['Ice Cream', 'Popularity'], ['Mint Chip', 2, 'Rocky Road', 1, 'Brownie Batter', 3])
                        >>> t.headers
                        ['Ice Cream', 'Popularity']
                        >>> t
                        Table(2, 3, ['Ice Cream', 'Popularity'], ['Mint Chip', 2, 'Rocky Road', 1, 'Brownie Batter', 3])
                        >>> print(t)
                        Ice Cream | Popularity
                        -------------------
                        Mint Chip 2
                        Rocky Road 1
                        Brownie Batter 3
                        """

                        def __init__(self, w, h, headers, values):
                            _________________________
                            self.headers = __________

                        def __repr__(self):
                            _________________________

                        def __str__(self):
                            header_line = __________
                            divider = __________
                            body = __________
                            return __________
                    </code></pre>
                </section>

                <section>
                    <h3>Table Representations (Solution)</h3>

                    <pre style="font-size:0.55em; height: 570px;"><code data-trim data-noescape class="python">
                    class Table(Matrix):
                        """
                        >>> t = Table(2, 3, ['Ice Cream', 'Popularity'], ['Mint Chip', 2, 'Rocky Road', 1, 'Brownie Batter', 3])
                        >>> t
                        Table(2, 3, ['Ice Cream', 'Popularity'], ['Mint Chip', 2, 'Rocky Road', 1, 'Brownie Batter', 3])
                        >>> print(t)
                        Ice Cream | Popularity
                        -------------------
                        Mint Chip 2
                        Rocky Road 1
                        Brownie Batter 3
                        """

                        def __init__(self, w, h, headers, values):
                            super().__init__(w, h, values)
                            self.headers = headers

                        def __repr__(self):
                            return f"Table({self.width}, {self.height}, {self.headers}, {self.values})"

                        def __str__(self):
                            header_line = ' | '.join(self.headers)
                            divider = '-' * sum([len(h) for h in self.headers])
                            body = super().__str__()
                            return header_line + '\n' + divider + '\n' + body
                    </code></pre>
                </section>

                <section>
                    <h3>Buttefly stages</h3>

                    <p class="smaller">Simulate the stages and instars of a butterfly using iterators.</p>
                    <pre style="font-size:0.4em; height: 570px;"><code data-trim data-noescape class="python">
                    class Butterfly:
                        """ See: https://monarchwatch.org/biology/cycle1.htm
                        >>> b = Butterfly()
                        >>> b.stage
                        'egg'
                        >>> b.next_stage()
                        >>> b.stage
                        'larva'
                        >>> b.instar
                        1
                        >>> for _ in range(4): b.next_instar()
                        >>> b.instar
                        5
                        >>> b.next_stage()
                        >>> b.stage
                        'pupa'
                        >>> b.next_stage()
                        >>> b.stage
                        'adult'
                        """
                        stages = ['egg', 'larva', 'pupa', 'adult']
                        num_instars = 5
                        
                        def __init__(self):
                            self.stage_iter = iter(_______)
                            _______________
                            
                        def next_stage(self):
                            _______ = next(_______)
                            if _______ == 'larva':
                                self.instar_iter = iter(_______)
                                _______________
                        
                        def next_instar(self):
                            _______ = next(_______________)
                    </code></pre>
                    
                </section>

                <section>
                    <h3>Buttefly stages (Solution)</h3>

                    <pre style="font-size:0.4em; height: 570px;"><code data-trim data-noescape class="python">
                    class Butterfly:
                        """ See: https://monarchwatch.org/biology/cycle1.htm
                        >>> b = Butterfly()
                        >>> b.stage
                        'egg'
                        >>> b.next_stage()
                        >>> b.stage
                        'larva'
                        >>> b.instar
                        1
                        >>> for _ in range(4): b.next_instar()
                        >>> b.instar
                        5
                        >>> b.next_stage()
                        >>> b.stage
                        'pupa'
                        >>> b.next_stage()
                        >>> b.stage
                        'adult'
                        """
                        stages = ['egg', 'larva', 'pupa', 'adult']
                        num_instars = 5
                        
                        def __init__(self):
                            self.stage_iter = iter(self.stages)
                            self.next_stage()
                            
                        def next_stage(self):
                            self.stage = next(self.stage_iter, self.stages[-1])
                            if self.stage == 'larva':
                                self.instar_iter = iter(range(1, self.num_instars + 1))
                                self.next_instar()

                        def next_instar(self):
                            self.instar = next(self.instar_iter, self.num_instars)
                    </code></pre>
                    
                </section>

			</div>
		</div>

        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/dist/reveal.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/plugin/highlight/highlight.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/highlightjs-badge@0.1.9/highlightjs-badge.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/reveal.js-menu@2.1.0/menu.js"></script>
        <!-- The loading of KaTeX is deferred to speed up page rendering -->
        <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/katex.min.js" integrity="sha384-31El76TwmbHj4rF9DyLsygbq6xoIobG0W+jqXim+a3dU9W53tdH3A/ngRPxOzzaB" crossorigin="anonymous"></script>
        <!-- To automatically render math in text elements, include the auto-render extension: -->
        <script defer src="https://cdn.jsdelivr.net/npm/katex@0.13.16/dist/contrib/auto-render.min.js" integrity="sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl" crossorigin="anonymous"
            onload="renderMathInElement(document.body, {fleqn: true});"></script>
        <script>
            const srcUrlPrefix = "https://cdn.jsdelivr.net/npm/reveal.js@4.1.0/";
            Reveal.initialize({
                hash: true,
                center: false,
                slideNumber: true,
                showNotes: false,
                margin: 0.1,
                preloadIframes: true,
                plugins: [ RevealHighlight, RevealMenu ],
                pdfSeparateFragments: true
            });

            // add HighlightJS-badge (options are optional)
            var options = {
                copyIconContent: "📄",
                checkIconContent: "✅"
            };
            window.highlightJsBadge();

            if (window.location.search == "?print-pdf") {
                var uncounted = document.querySelectorAll("[data-visibility='uncounted']");
                uncounted.forEach(node => {
                    node.parentNode.classList.add("no-print")
                })
            }
        </script>
    </body>
</html>